%{
    int yylex();
    int yyerror(const char *s);
    #include  stdio.h  
%}

%start program 
%token                      SEMICOLON  
%token                          COMMA
%token                         PLUS  
%token                           MINUS
%token                              MULT
%token                              DIV  
%token                            LP  
%token                            RP  
%token                            LCB  
%token                            RCB  
%token                           AND  
%token                           LOR  
%token                           EQ  
%token                         LEQ  
%token                           LNEQ  
%token                           LT  
%token                           LTE  
%token                            GT  
%token                           GTE  
%token                            POW  
%token                             LNOT  
%token                           PRINT  
%token                           ELSE  
%token                             IF  
%token                          WHILE  
%token                            FOR  
%token                          TYPE  
%token                         RETURN  
%token                        CONNECT  
%token                     DISCONNECT  
%token                       FUNCTION  
%token                   READALTITUDE  
%token                READTEMPERATURE  
%token                   TURNONCAMERA  
%token                  TURNOFFCAMERA  
%token                     STARTVIDEO  
%token                     PAUSEVIDEO  
%token                      STOPVIDEO  
%token                    TAKEPICTURE  
%token                      SAVEMEDIA  
%token                     STARTTIMER  
%token                      STOPTIMER  
%token                  READFROMTIMER  
%token               READACCELERATION  
%token                     READSPEEDX  
%token                     READSPEEDY  
%token                    READSPEEDZ  
%token                      SETSPEEDX  
%token                      SETSPEEDY  
%token                      SETSPEEDZ  
%token                       SETSPEED  
%token                    FOLLOWCURVE  
%token                     READCURVE  
%token                           RISE  
%token                        DESCEND 
%token                           LAND  
%token                    MOVEFORWARD  
%token                       MOVEBACK  
%token                      MOVERIGHT  
%token                       MOVELEFT  
%token                     ROTATELEFT  
%token                    ROTATERIGHT  
%token                           WAIT
%token                           SAVE
%token                           SCAN
%token                          SETHEIGHT   
%token                    READBATTERY  
%token                   READLOCATION  
%token                    READINCLINE  
%token                      STOPMOTOR  
%token                 BOOLEAN_LITERAL  
%token                   COMMENT  
%token                  IDENTIFIER_LITERAL 
%token                  IP_ADDRESS  
%token                    INTEGER_LITERAL  
%token         FLOAT_LITERAL  
%token               STRING_LITERAL  


%left PLUS MINUS 
%left MUL DIV 
%left LEQ LNEQ
%left LT LTE GT GTE 

%%
 program   :  stmtList; 

 stmtList   :  stmt   SEMICOLON  stmtList   |  stmt   SEMICOLON;

 stmt     :  declaration_stmt  
		|  assign_stmt  
		|  init_stmt  
		|  if_stmt  
		|  loop_stmt  
        |  expr  
		|  print_stmt  

 declaration_stmt     :  funct_declaration   
						|  var_declaration_list;   
						
 var_declaration_list     :  var_declaration   
						|   var_declaration;  

 var_declaration   : TYPE  IDENTIFIER_LITERAL;

 funct_declaration   : FUNCTION TYPE IDENTIFIER_LITERAL LP  parameter_list   RP   LCB  stmtList   RETURN  expr   SEMICOLON RCB
						| FUNCTION TYPE IDENTIFIER_LITERAL LP  RP   LCB  stmtList   RETURN  expr   SEMICOLON RCB
						| FUNCTION TYPE IDENTIFIER_LITERAL LP  RP   LCB  stmtList   RCB
                        | FUNCTION TYPE IDENTIFIER_LITERAL LP  parameter_list   RP LCB stmtList RCB 
						| FUNCTION  IDENTIFIER_LITERAL LP  parameter_list   RP   LCB  stmtList    RCB
						| FUNCTION  IDENTIFIER_LITERAL LP  RP   LCB  stmtList    RCB;

  parameter_list      :  IDENTIFIER_LITERAL
		 			|   IDENTIFIER_LITERAL COMMA  parameter_list;   

 init_stmt     : TYPE  assign_stmt   ;

 if_stmt   : IF LP  logic_expr   RP LCB  stmtList   RCB
              | IF LP  logic_expr   RP LCB  stmtList   RCB ELSE LCB  stmtList   RCB ;

 loop_stmt     :  while_stmt   
		    	|  for_stmt  ;  

 while_stmt     : WHILE LP  logic_expr   RP    LCB   stmtList   RCB
				|  WHILE LP  function_call_expression   RP    LCB   stmtList   RCB;
		    
 for_stmt     : FOR LP  init_stmt   SEMICOLON   logic_expr   SEMICOLON   stmt    RP LCB  stmtList   RCB;

 expr     :  arithmetic_expr_level1  ;

 arithmetic_expr_level1   :  arithmetic_expr_level1   PLUS  arithmetic_expr_level2  
    						|  arithmetic_expr_level1   MINUS  arithmetic_expr_level2  
							|  function_call_expression  
							|  arithmetic_expr_level2  ;

 arithmetic_expr_level2   :  arithmetic_expr_level2   MULT  arithmetic_expr_level3  
							|  arithmetic_expr_level2   DIV  arithmetic_expr_level3  
							|  arithmetic_expr_level3  ;

 arithmetic_expr_level3   :  arithmetic_expr_level3    POW  arithmetic_expr_level4  
							|  arithmetic_expr_level4  ;

 arithmetic_expr_level4   :  LP  arithmetic_expr_level1   RP 
							|   logic_expr  ;

 logic_expr   : 
    logic_expr   LOR  logic_expr_level2  
	|  logic_expr_level2  
    | BOOLEAN_LITERAL
    | INTEGER_LITERAL
    | FLOAT_LITERAL
    | STRING_LITERAL
    | IDENTIFIER_LITERAL;

 logic_expr_level2   :  logic_expr_level2   LAND  logic_expr_level3  
						|  logic_expr_level3  ; 

 logic_expr_level3   :  logic_expr_level3   LEQ  logic_expr_level4  
						|  logic_expr_level3   LNEQ  logic_expr_level4  
						|  logic_expr_level4  ;

 logic_expr_level4   :  logic_expr_level4   LT  logic_expr_level5  
						|  logic_expr_level4   LTE  logic_expr_level5  
						|  logic_expr_level4   GT  logic_expr_level5  
						|  logic_expr_level4   GTE  logic_expr_level5  ;

 logic_expr_level5   :  LNOT LP  logic_expr_level6   RP
						| LNOT LP  expr   RP 
						|  logic_expr_level6  ;

 logic_expr_level6   :  | BOOLEAN_LITERAL
    					 | INTEGER_LITERAL
    					 | FLOAT_LITERAL
    					 | STRING_LITERAL
    					 | IDENTIFIER_LITERAL;

 function_call_expression   :  IDENTIFIER_LITERAL LP   parameter_list    RP
                         	| IDENTIFIER_LITERAL LP RP
							|  primitive_function  ;

 primitive_function   : | 	CONNECT LP IP_ADDRESS COMMA INTEGER_LITERAL RP
							| READALTITUDE LP RP
							| READACCELERATION LP RP
							| READTEMPERATURE LP RP 
							| TURNONCAMERA LP RP
							| TURNOFFCAMERA LP RP 
							| TAKEPICTURE LP RP
							| READFROMTIMER LP RP
							| READSPEEDX LP RP
							| READSPEEDY LP RP 
							| READSPEEDZ LP RP 
							| WAIT LP FLOAT_LITERAL RP
							| WAIT LP IDENTIFIER_LITERAL RP
							| SETSPEEDX LP FLOAT_LITERAL RP
							| SETSPEEDX LP IDENTIFIER_LITERAL RP
							| SETSPEEDY LP IDENTIFIER_LITERAL RP
							| SETSPEEDY LP FLOAT_LITERAL RP
							| SETSPEEDZ LP FLOAT_LITERAL RP
							| SETSPEEDZ LP IDENTIFIER_LITERAL RP
							| FOLLOWCURVE LP FLOAT_LITERAL RP
							| FOLLOWCURVE LP IDENTIFIER_LITERAL RP
							| DISCONNECT LP RP 
							| READCURVE LP RP
							| SETHEIGHT LP FLOAT_LITERAL RP
							| SETHEIGHT LP IDENTIFIER_LITERAL RP
							| RISE LP FLOAT_LITERAL RP 
							| RISE LP IDENTIFIER_LITERAL RP 
							| DESCEND LP FLOAT_LITERAL RP
							| DESCEND LP IDENTIFIER_LITERAL RP
							| LAND LP RP
							| MOVEFORWARD LP FLOAT_LITERAL RP
							| MOVEFORWARD LP IDENTIFIER_LITERAL RP 
							| MOVEBACK LP FLOAT_LITERAL RP
							| MOVEBACK LP IDENTIFIER_LITERAL RP
							| MOVERIGHT LP IDENTIFIER_LITERAL RP
							| MOVERIGHT LP FLOAT_LITERAL RP
							| MOVELEFT LP IDENTIFIER_LITERAL RP
							| MOVELEFT LP FLOAT_LITERAL RP
							| STARTVIDEO LP RP
							| PAUSEVIDEO LP RP
							| STOPVIDEO LP RP  
							| READBATTERY LP RP
							| STOPMOTOR LP RP
							| READLOCATION LP RP
							| STARTTIMER LP RP 
							| STOPTIMER LP RP 
							| SCAN LP  RP 
							| SAVE LP  parameter_list   RP
							| ROTATELEFT LP FLOAT_LITERAL RP
							| ROTATELEFT LP IDENTIFIER_LITERAL RP
							| ROTATERIGHT LP FLOAT_LITERAL RP
							| ROTATERIGHT LP IDENTIFIER_LITERAL RP
							| READINCLINE LP RP
							| DISCONNECT LP RP
							|  print_stmt  ;

 print_stmt   :| PRINT LP  logic_expr_level6   RP 
				| PRINT LP  parameter_list   RP 
				| PRINT LP  function_call_expression  ;

 assign_stmt   : IDENTIFIER_LITERAL EQ  expr  ;


 if_stmt   :  matched_if_stmt   
			|  unmatched_if_stmt  ;


 matched_if_stmt   : IF LP  logic_expr   RP LCB matched_if_stmt  RCB ELSE LCB matched_if_stmt  RCB;

 unmatched_if_stmt   : IF LP  logic_expr   RP  stmt  
				|IF LP  logic_expr   RP  matched_if_stmt   ELSE  unmatched_if_stmt  ;

%%
#include "lex.yy.c"




int main() {
    return yyparse();
}
int yyerror( const char *s ) { /* is not in swBiot error on line %d: %s\n",line, s);*/ }